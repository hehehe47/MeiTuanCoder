'''
Description:
    https://www.nowcoder.com/acm/contest/138/C
'''
'''
0.000 0.133 0.210 0.292 0.670 0.270 0.953 0.353 0.328 0.128 0.873 0.082 0.771 0.300 0.405 0.455
0.867 0.000 0.621 0.384 0.934 0.847 0.328 0.488 0.785 0.308 0.158 0.774 0.923 0.261 0.872 0.924
0.790 0.379 0.000 0.335 0.389 0.856 0.344 0.998 0.747 0.895 0.967 0.383 0.576 0.943 0.836 0.537
0.708 0.616 0.665 0.000 0.146 0.362 0.757 0.942 0.596 0.903 0.381 0.281 0.294 0.788 0.804 0.655
0.330 0.066 0.611 0.854 0.000 0.687 0.983 0.217 0.565 0.293 0.256 0.938 0.851 0.487 0.190 0.680
0.730 0.153 0.144 0.638 0.313 0.000 0.832 0.526 0.429 0.707 0.414 0.617 0.925 0.638 0.526 0.545
0.047 0.672 0.656 0.243 0.017 0.168 0.000 0.357 0.125 0.307 0.879 0.551 0.641 0.959 0.981 0.465
0.647 0.512 0.002 0.058 0.783 0.474 0.643 0.000 0.325 0.494 0.893 0.064 0.563 0.429 0.501 0.872
0.672 0.215 0.253 0.404 0.435 0.571 0.875 0.675 0.000 0.940 0.053 0.329 0.232 0.280 0.359 0.474
0.872 0.692 0.105 0.097 0.707 0.293 0.693 0.506 0.060 0.000 0.040 0.776 0.589 0.704 0.018 0.968
0.127 0.842 0.033 0.619 0.744 0.586 0.121 0.107 0.947 0.960 0.000 0.486 0.266 0.662 0.374 0.698
0.918 0.226 0.617 0.719 0.062 0.383 0.449 0.936 0.671 0.224 0.514 0.000 0.821 0.027 0.415 0.227
0.229 0.077 0.424 0.706 0.149 0.075 0.359 0.437 0.768 0.411 0.734 0.179 0.000 0.841 0.409 0.158
0.700 0.739 0.057 0.212 0.513 0.362 0.041 0.571 0.720 0.296 0.338 0.973 0.159 0.000 0.935 0.765
0.595 0.128 0.164 0.196 0.810 0.474 0.019 0.499 0.641 0.982 0.626 0.585 0.591 0.065 0.000 0.761
0.545 0.076 0.463 0.345 0.320 0.455 0.535 0.128 0.526 0.032 0.302 0.773 0.842 0.235 0.239 0.000
'''

'''
     1     2     3     4      5     6     7     8      9     10    11    12     13    14    15    16
1  0.000 0.133 0.210 0.292  0.670 0.270 0.953 0.353  0.328 0.128 0.873 0.082  0.771 0.300 0.405 0.455
2  0.867 0.000 0.621 0.384  0.934 0.847 0.328 0.488  0.785 0.308 0.158 0.774  0.923 0.261 0.872 0.924
3  0.790 0.379 0.000 0.335  0.389 0.856 0.344 0.998  0.747 0.895 0.967 0.383  0.576 0.943 0.836 0.537
4  0.708 0.616 0.665 0.000  0.146 0.362 0.757 0.942  0.596 0.903 0.381 0.281  0.294 0.788 0.804 0.655
 
5  0.330 0.066 0.611 0.854  0.000 0.687 0.983 0.217  0.565 0.293 0.256 0.938  0.851 0.487 0.190 0.680
6  0.730 0.153 0.144 0.638  0.313 0.000 0.832 0.526  0.429 0.707 0.414 0.617  0.925 0.638 0.526 0.545
7  0.047 0.672 0.656 0.243  0.017 0.168 0.000 0.357  0.125 0.307 0.879 0.551  0.641 0.959 0.981 0.465
8  0.647 0.512 0.002 0.058  0.783 0.474 0.643 0.000  0.325 0.494 0.893 0.064  0.563 0.429 0.501 0.872

9  0.672 0.215 0.253 0.404  0.435 0.571 0.875 0.675  0.000 0.940 0.053 0.329  0.232 0.280 0.359 0.474
10 0.872 0.692 0.105 0.097  0.707 0.293 0.693 0.506  0.060 0.000 0.040 0.776  0.589 0.704 0.018 0.968
11 0.127 0.842 0.033 0.619  0.744 0.586 0.121 0.107  0.947 0.960 0.000 0.486  0.266 0.662 0.374 0.698
12 0.918 0.226 0.617 0.719  0.062 0.383 0.449 0.936  0.671 0.224 0.514 0.000  0.821 0.027 0.415 0.227

13 0.229 0.077 0.424 0.706  0.149 0.075 0.359 0.437  0.768 0.411 0.734 0.179  0.000 0.841 0.409 0.158
14 0.700 0.739 0.057 0.212  0.513 0.362 0.041 0.571  0.720 0.296 0.338 0.973  0.159 0.000 0.935 0.765
15 0.595 0.128 0.164 0.196  0.810 0.474 0.019 0.499  0.641 0.982 0.626 0.585  0.591 0.065 0.000 0.761
16 0.545 0.076 0.463 0.345  0.320 0.455 0.535 0.128  0.526 0.032 0.302 0.773  0.842 0.235 0.239 0.000
'''

s4 = '''
0.000 0.133 0.210 0.292 
0.867 0.000 0.621 0.384
0.790 0.379 0.000 0.335
0.708 0.616 0.665 0.000
'''
a = (0.133 * 0.335 * 0.21 + 0.133 * 0.665 * 0.292)
print(a)
# c = [[[[0, 1], [2, 3]], [[4, 5], [6, 7]]], [[[8, 9], [10, 11]], [[12, 13], [14, 15]]]]

b = (0.867 * 0.335 * 0.621 + 0.867 * 0.665 * 0.384)
c = (0.335 * 0.133 * 0.790 + 0.335 * 0.867 * 0.379)
d = (0.665 * 0.133 * 0.708 + 0.665 * 0.867 * 0.616)
# print(a+b+c+d)
l1 = []

r = [input().split(' ') for i in range(16)]
# r = [input().split(' ') for i in range(16)]


# for i in range(0, 16, 2):
#     print(r[i][i + 1], r[i + 1][i])
#     l1.append(float(r[i][i + 1]))
#     l1.append(float(r[i + 1][i]))
# -----------------------
# e1 = float(r[4][5])
# f1 = float(r[5][4])
# g1 = float(r[6][7])
# h1 = float(r[7][6])
# -----------------------
e2 = float(r[4][5]) * (float(r[4][6]) * float(r[6][7]) + float(r[4][7]) * float(r[7][6]))
f2 = float(r[5][4]) * (float(r[5][6]) * float(r[6][7]) + float(r[5][7]) * float(r[7][6]))
g2 = float(r[6][7]) * (float(r[6][4]) * float(r[4][5]) + float(r[6][5]) * float(r[5][4]))
h2 = float(r[7][6]) * (float(r[7][4]) * float(r[4][5]) + float(r[7][5]) * float(r[5][4]))
# print(b)
# print(c)
# print(d)
# print(e)
# print(b + c + d + e)
# l = []
# for i in c:
#     for j in i:
#         print(j)
# print('-----')
# for k in j:
#     print(k)
#     print('---')
# l.append(float(r[k[0]][k[1]]))
# l.append(float(r[k[1]][k[0]]))


print(l1)
LEN = 16
# l = [i for i in range(LEN)]  # 决赛
# l1 = [[i for i in range(int(LEN/2))] if j != 1 else [i for i in range(int(LEN/2), LEN)] for j in range(0, 2)]  # 半决赛
# l1 = [[i for i in range(int(LEN / 2) * j, int(LEN / 2) * (j + 1))] for j in range(0, 2)]  # 半决赛
# l2 = [[i for i in range(int(LEN / 4) * j, int(LEN / 4) * (j + 1))] for j in range(0, 4)]  # 1/4决赛
# l3 = [[i for i in range(int(LEN / 8) * j, int(LEN / 8) * (j + 1))] for j in range(0, 8)]  # 1/8决赛
# for i in range(0,8,2)
# print(l3)
rate_list = []
rival_dic = {}
count = 0
for z in range(16):
    rival_dic[z] = [z]
for i in [2 ** k for k in range(3, -1, -1)]:
    table = [[c for c in range(int(LEN / i) * j, int(LEN / i) * (j + 1))] for j in range(0, i)]  # 对战表
    # print(table)
    for combat in table:  # 该轮对战队伍
        combat_copy = combat.copy()
        rate_list_tmp = rate_list.copy()  # 复制一个当前轮的胜率
        for team_index in combat:
            if count == 0:
                rival = team_index + 1 if team_index % 2 == 0 else team_index - 1  # 第一轮对手两个中的另一个
                rate_list.append(float(r[team_index][rival]))  # 初始化胜率表
                rival_dic[team_index].append(rival)  # 初始化已经打赢的对手表
            else:
                need_to_defeat = list(set(combat_copy).difference(rival_dic[team_index]))  # 做个集合的差 求出当前轮需要打赢的对手
                # for opponent in need_to_defeat:
                winrate = 0
                for opponent in need_to_defeat:  # 遍历对手
                    winrate += rate_list_tmp[team_index] * rate_list_tmp[opponent] * float(r[team_index][opponent])
                    # 胜率等于：自身当前轮胜率*对手当前轮胜率*自己答应对手的胜率（使用复制的胜率 否则会把胜率叠加）
                rate_list[team_index] = winrate
                rival_dic[team_index] += need_to_defeat





                # combat1 = combat.copy()
                # print(combat1)
                # combat1 = list(set(combat1).difference(
                #     [[c for c in range(int(LEN / i) * j, int(LEN / i) * (j + 1))] for j in range(0, i + 1)][
                #         int(team_index / i)]))
                # print(combat1)
                # print(count)
    # pre_table = table.copy()
    count += 1
for i in rate_list:
    if i != rate_list[len(rate_list) - 1]:
        print("%.10f" % (i), end=' ')
    else:
        print("%.10f" % (i))
